plugins {
	id "java-library"
	id "maven-publish"
	id "com.github.johnrengelman.shadow" version "8.1.0"
	id "xyz.jpenilla.run-paper" version "2.0.1"
}

group = "net.zerodind"
version = "1.20.5-SNAPSHOT"

repositories {
	mavenCentral()
	maven { // For Spigot API
		name "spigotmc"
		url "https://hub.spigotmc.org/nexus/content/groups/public/"
		content {
			includeGroup "org.bukkit"
			includeGroup "org.spigotmc"
			includeGroup "net.md-5"
		}
	}
	maven { // For PaperLib
		name "papermc"
		url "https://repo.papermc.io/repository/maven-public/"
		content {
			includeGroup "io.papermc"
		}
	}
	maven { // For UhcCore NMS
		name "uhccore"
		url "https://gitlab.com/api/v4/groups/uhccore/-/packages/maven"
		content {
			includeGroup "net.zerodind"
		}
	}
	maven { // For VaultAPI
		name "jitpack"
		url "https://jitpack.io"
		content {
			includeGroup "com.github.MilkBowl"
		}
	}
	maven { // For ProtocolLib
		name "dmulloy2"
		url "https://repo.dmulloy2.net/repository/public/"
		content {
			includeGroup "com.comphenix.protocol"
		}
	}
	maven { // For AnvilGUI
		name "codemc"
		url "https://repo.codemc.io/repository/maven-snapshots/"
		content {
			includeGroup "net.wesjd"
		}
	}
	flatDir { // For BiomeMapping
		dirs "$rootDir/libs"
	}
	maven {
		name "WorldEdit"
		url "https://maven.enginehub.org/repo/"
		content {
			includeGroup "com.sk89q.worldedit"
		}
	}
}

// Configuration for dependencies that need to be included in the shadow JAR for use at runtime.
// We could use configurations.runtimeOnly in many cases, but the problem is that some
// dependencies are compiled with a Java version > 8, which means they can't be included
// on configurations.runtimeClasspath due to Gradle's "variant aware" dependency resolution.
// See also: https://docs.gradle.org/8.0.2/userguide/variant_model.html#a_more_complicated_example
configurations.register("shadowJar")

dependencies {
	compileOnly "net.zerodind:uhccore:1.20.4"
	compileOnly "org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT"
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	compileOnly "com.github.MilkBowl:VaultAPI:1.7"
	compileOnly "com.comphenix.protocol:ProtocolLib:4.7.0"
	implementation "net.wesjd:anvilgui:1.6.3-SNAPSHOT"
	implementation "io.papermc:paperlib:1.0.8"
	implementation project(":Support-WorldEdit-6")
	implementation project(":Support-WorldEdit-7")
	implementation ":BiomeMapping-1.3"
	implementation "net.zerodind:uhccore-nms:1.0.0"
	shadowJar "net.zerodind:uhccore-nms-1_18_R1:1.0.0"
	shadowJar "net.zerodind:uhccore-nms-1_18_R2:1.0.0"
	shadowJar "net.zerodind:uhccore-nms-1_19_R1:1.0.0"
	shadowJar "net.zerodind:uhccore-nms-1_19_R2:1.0.0"
	shadowJar "net.zerodind:uhccore-nms-1_19_R3:1.0.0"
}

java {
	// Target Java 8 for Minecraft 1.8 support
	toolchain.languageVersion = JavaLanguageVersion.of(8)

	withJavadocJar()
	withSourcesJar()
}

tasks.named("shadowJar") {
	archiveClassifier = ""
	configurations += [ project.configurations.shadowJar ]

	relocate "io.papermc.lib", "com.gmail.val59000mc.paperlib"
	relocate "net.wesjd.anvilgui", "com.gmail.val59000mc.anvilgui"
	relocate "com.pieterdebot.biomemapping", "com.gmail.val59000mc.biomemapping"
}

tasks.named("assemble") {
	dependsOn tasks.named("shadowJar")
}

tasks.named("processResources") {
	filesMatching("plugin.yml") {
		expand(version: version)
	}
}

tasks.named("runServer") {
	// The minecraft version to use can be changed via the mcVersion property
	// For example: gradlew runServer -PmcVersion=1.8.8
	def mcVersion = project.findProperty("mcVersion") ?: "1.19.4"
	minecraftVersion mcVersion
	runDirectory rootProject.file("run/$mcVersion")
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(getJavaVersionFor(mcVersion))
	}
	// These options enable remote debugging via JDWP on localhost:5005
	// See "Testing your changes" in CONTRIBUTING.md for more details
	jvmArgs += [ "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005" ]
}

// Only publish the shadowed JAR
components.java {
	[configurations.runtimeElements, configurations.apiElements].each {
		withVariantsFromConfiguration(it) { skip() }
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			name "GitLab"
			url "https://gitlab.com/api/v4/projects/${System.getenv("CI_PROJECT_ID")}/packages/maven"
			credentials(HttpHeaderCredentials) {
				name = "Job-Token"
				value = System.getenv("CI_JOB_TOKEN")
			}
			authentication {
				header(HttpHeaderAuthentication)
			}
		}
	}
}

int getJavaVersionFor(String mcVersion) {
	switch (Integer.parseInt(mcVersion.split("\\.")[1])) {
		case 8..16: return 8
		case 17: return 16
		default: return 17
	}
}
